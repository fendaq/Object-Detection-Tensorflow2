from __future__ import absolute_import
from __future__ import division
from __future__ import print_function
import tensorflow as tf


def anchor_generator(features, anchors, factor, flatten=False):
    """

    :param features: a list feature maps generated by fpn
    :param anchors: a list of list [[n, 2], [m, 2], ......]
    :param factor: the generated anchors will be multiplied factor, for example if factor is downsampling
    rate, the generated anchors will be projected to the original image
    :param flatten: if True, the generated anchors of every layer will be reshape to [-1, 2]
    :return: a list of anchors corresponding to feature maps of features
    """
    out_anchors = []
    for feat, anch, fact in zip(features, anchors, factor):
        num_anchors = len(anch)
        shape = tf.shape(feat)
        h_i, w_i = shape[1], shape[2]
        h_f, w_f = tf.cast(h_i, tf.float32), tf.cast(w_i, tf.float32)
        grid_y1 = tf.range(0., h_f, dtype=tf.float32)
        grid_x1 = tf.range(0., w_f, dtype=tf.float32)
        y = tf.reshape(grid_y1, [-1, 1, 1, 1]) + 0.5
        x = tf.reshape(grid_x1, [1, -1, 1, 1]) + 0.5
        y = tf.tile(y, [1, w_i, 1, 1])
        x = tf.tile(x, [h_i, 1, 1, 1])
        yx = tf.concat([y, x], axis=-1)
        yx = tf.tile(yx, [1, 1, num_anchors, 1])
        hw = tf.constant(anch, dtype=tf.float32, shape=[1, 1, num_anchors, 2])
        y1x1 = yx - hw / 2.
        y2x2 = yx + hw / 2.
        if flatten is True:
            y1x1 = tf.reshape(y1x1, [-1, 2])
            y2x2 = tf.reshape(y2x2, [-1, 2])
        y1x1y2x2 = tf.concat([y1x1, y2x2], axis=-1) * fact
        out_anchors.append(y1x1y2x2)
    return out_anchors
